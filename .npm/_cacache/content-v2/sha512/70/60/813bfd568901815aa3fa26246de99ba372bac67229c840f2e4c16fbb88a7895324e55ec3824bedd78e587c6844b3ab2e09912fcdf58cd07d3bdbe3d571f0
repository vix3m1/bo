{"_id":"encode32","_rev":"15-3019b903068c42348aadb07d2ee83716","name":"encode32","description":"encoding utility for integers inspired by Crockford Base32","dist-tags":{"latest":"1.1.0"},"versions":{"1.0.0":{"name":"encode32","description":"an encoding for 32-bit numbers inspired by Crockford Base32","version":"1.0.0","author":{"name":"Ken Woodruff","email":"ken.woodruff@gmail.com"},"repository":{"type":"git","url":"git://github.com/femto113/node-encode32.git"},"main":"encode32.js","license":"MIT","engines":{"node":">= 0.6.7"},"_npmUser":{"name":"femto113","email":"ken.woodruff@gmail.com"},"_id":"encode32@1.0.0","dependencies":{},"devDependencies":{},"optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0","_nodeVersion":"v0.6.7","_defaultsLoaded":true,"dist":{"shasum":"baabedaea3ec3c32291be9e3426c6ec0ee925178","tarball":"https://registry.npmjs.org/encode32/-/encode32-1.0.0.tgz","integrity":"sha512-YWN5sDvBI++zgxR7Le2rCK5EJKpDFE78lZBYd+LsTf813g0wIhIvJDrS5oCXD6sNMgg0gn5VLtIczEPKixtJpA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIFiz1i6pL1QfiJ70Xvn2X+QnqaGqw5Y924ebN8dR8YkrAiEAnnHyrvW5+jEzeDcdsfZHNhiZsj33WK8MHjW/L35DxG0="}]},"maintainers":[{"name":"femto113","email":"ken.woodruff@gmail.com"}],"directories":{}},"1.0.1":{"name":"encode32","description":"an encoding for 32-bit numbers inspired by Crockford Base32","version":"1.0.1","author":{"name":"Ken Woodruff","email":"ken.woodruff@gmail.com"},"repository":{"type":"git","url":"git://github.com/femto113/node-encode32.git"},"main":"encode32.js","license":"MIT","engines":{"node":">= 0.4.7"},"_npmUser":{"name":"femto113","email":"ken.woodruff@gmail.com"},"_id":"encode32@1.0.1","dependencies":{},"devDependencies":{},"optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0","_nodeVersion":"v0.6.7","_defaultsLoaded":true,"dist":{"shasum":"966f31ce351ce1965b77b1633fe617f48e353821","tarball":"https://registry.npmjs.org/encode32/-/encode32-1.0.1.tgz","integrity":"sha512-wuc9PHBO8PKCQ/9BDtL5yYj48CJNH+HNJAS8R/85q9gZwlEkHhT+PCuvNktyDRe+dmj6UYSLcrRNQ5MPhqEyyw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCE6cCGlxa0/vg4mZAgrCEnfhh6QpB7PYYTO8seIjBeGQIhAJ0L5/wPkrUc3xusdvBK/LH7OdtCAAXrpLvLHoA+shYR"}]},"maintainers":[{"name":"femto113","email":"ken.woodruff@gmail.com"}]},"1.0.2":{"name":"encode32","description":"an encoding for 32-bit numbers inspired by Crockford Base32","version":"1.0.2","author":{"name":"Ken Woodruff","email":"ken.woodruff@gmail.com"},"repository":{"type":"git","url":"git://github.com/femto113/node-encode32.git"},"main":"encode32.js","license":"MIT","engines":{"node":">= 0.4.7"},"_npmUser":{"name":"femto113","email":"ken.woodruff@gmail.com"},"_id":"encode32@1.0.2","dependencies":{},"devDependencies":{},"optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.1","_nodeVersion":"v0.6.7","_defaultsLoaded":true,"dist":{"shasum":"651c18f95de860e297e8943a75a768a2a539da26","tarball":"https://registry.npmjs.org/encode32/-/encode32-1.0.2.tgz","integrity":"sha512-nfI3BOCvXhUuoQKLioMu4oP+hfncHGhKlUs9p5u0IL/qlZ5afkdBo1qJ1Jas7OZcRPOPPkbXItvqy0CgHNniLA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCp35SRAZvMuaB5yGkldl9YbwBBVGeWX5PlQIKRzsMfBQIhAMLJlNcWEW0OPJ/J4IwV5E0R5tlfHD1kHtmnBllsMPpJ"}]},"maintainers":[{"name":"femto113","email":"ken.woodruff@gmail.com"}]},"1.1.0":{"name":"encode32","description":"encoding utility for integers inspired by Crockford Base32","version":"1.1.0","author":{"name":"Ken Woodruff","email":"ken.woodruff@gmail.com"},"repository":{"type":"git","url":"git://github.com/femto113/node-encode32.git"},"main":"encode32.js","scripts":{"test":"node test.js"},"license":"MIT","engines":{"node":">= 0.4.7"},"_npmUser":{"name":"femto113","email":"ken.woodruff@gmail.com"},"_id":"encode32@1.1.0","dependencies":{},"devDependencies":{},"optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.1","_nodeVersion":"v0.6.11","_defaultsLoaded":true,"dist":{"shasum":"0c54b45fb314ad5502e3c230cb95acdc5e5cd1dd","tarball":"https://registry.npmjs.org/encode32/-/encode32-1.1.0.tgz","integrity":"sha512-BCmijZ4lWec5+fuGHclf7HSZf+mos2ncQkBjtvomvRWVEGAMI/tw56fuN2x4e+FTgQuTPbZjODPwX80lFy958w==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIBcUbhM/pCKt0HZ5H8xzEfM7ImY1DPZLZOPVu0k3laceAiEAqAqdPU79iUdrJUG6zF9GrHfR7Kn9486NhulvDTDbpUo="}]},"maintainers":[{"name":"femto113","email":"ken.woodruff@gmail.com"}]}},"readme":"# encode32\n\nThis is a Base-32 encoding for 32-bit numbers inspired by Douglas Crockford\n\nhttp://www.crockford.com/wrmg/base32.html\n\nThis encoding is designed to balance compactness with human-friendliness and robustness.\nIt uses 32 digits, the standard numbers and 22 alphabetic characters.\nIt is case insensitive and characters easily confused by humans are accepted as aliases for\nsome digits (e.g. l and I for 1, o for 0, etc).  U is excluded so you can avoid\nwinding up with certain common obscenities.\n\nA 32-bit unsigned integer will encode into 7 base-32 (5-bit) digits (left padded\nwith 0 as needed).  Rather than use an additional check character as suggested in\nthe original source, we fill the otherwise unused bits of the final character to\nwith a 3-bit parity checksum.  This feature makes it incompatible with other encoding\nschemes, but allows for quick sanity checks for transcribed numbers without the increased\nlength or additional alphabet required by Crockford's \"mod 37 checksum\" approach.\n\n## Install\n\n    npm install encode32\n\nor\n\n    git clone http://github.com/femto113/node-encode32.git\n    cd encode32\n    npm link\n\n## Example\n\n    var enc = require(\"./encode32\");\n\n    var a = enc.encode32(123456772);\n    // a == \"0XDWT16\"\n\n    // can change case or substitute 1's and 0's without problem\n    var b = [\n      \"0xdwt16\", // lower case\n      \"oXDWTi6\", // o for 0 and i for 1\n      \"OxDwtL6\"  // O for 0 and L for 1\n    ].map(function (s) { return enc.decode32(s); });\n    // b == [123456772, 123456772, 123456772]\n\n    // but break the parity check and you get NaN\n    var c = [\n      \"0XDWT18\", // incorrect final digit\n      \"X0DWT16\", // transposed digits\n      \"0XDT16\"   // missing digit\n    ].map(function (s) { return enc.decode32(s); });\n    // c == [NaN, NaN, NaN]\n\n    console.log(a, b, c);\n\n## TODO\n\n- needs performance work (probably should port to C++)\n- should provide versions without parity bits and with checksum for\n  compatibility with [other implementations](https://github.com/gbarr/Encode-Base32-Crockford)\n","maintainers":[{"name":"femto113","email":"ken.woodruff@gmail.com"}],"time":{"modified":"2022-06-17T04:53:52.876Z","created":"2012-02-16T21:46:35.944Z","1.0.0":"2012-02-16T21:46:37.157Z","1.0.1":"2012-02-17T21:21:15.644Z","1.0.2":"2012-02-28T00:40:16.942Z","1.1.0":"2012-05-11T23:12:51.171Z"},"author":{"name":"Ken Woodruff","email":"ken.woodruff@gmail.com"},"repository":{"type":"git","url":"git://github.com/femto113/node-encode32.git"}}